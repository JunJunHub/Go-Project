#访问资源请求抽象定义,与e.Enforce函数参数一一对应,即用户访问某项资源请求的抽象
#sub=访问主体(用户)
#obj=访问客体(资源)
#act=访问方式(操作)
[request_definition]
r  = sub, obj, act  #访问功能菜单请求 sub=u_{userId} obj={menuId}              act={All}
r2 = sub, obj, act  #访问通道分组请求 sub=u_{userId} obj={channelGroupId}      act={All}
r3 = sub, obj, act  #访问大屏资源请求 sub=u_{userId} obj={tvWallId}            act={All}
r4 = sub, obj, act  #访问矩阵预案请求 sub=u_{userId} obj={matrixSchemeId}      act={All}
r5 = sub, obj, act  #访问预案分组请求 sub=u_{userId} obj={matrixSchemeGroupId} act={All}
r6 = sub, obj, act  #访问会议调度请求 sub=u_{userId} obj={meetDispatchId}      act={All}
r7 = sub, obj, act  #访问会议分组请求 sub=u_{userId} obj={meetDispatchGroupId} act={All}

#策略规则定义,即角色拥有的数据权限记录
#sub=主体(角色)
#obj=客体(资源)
#act=权限(操作)
[policy_definition]
p  = sub, obj, act  #功能菜单权限规则 sub=r_{roleId} obj={menuId}              act={All}
p2 = sub, obj, act  #通道分组权限规则 sub=r_{roleId} obj={channelGroupId}      act={All}
p3 = sub, obj, act  #大屏资源权限规则 sub=r_{roleId} obj={tvWallId}            act={All}
p4 = sub, obj, act  #矩阵预案权限规则 sub=r_{roleId} obj={matrixSchemeId}      act={All}
p5 = sub, obj, act  #预案分组权限规则 sub=r_{roleId} obj={matrixSchemeGroupId} act={All}
p6 = sub, obj, act  #会议调度权限规则 sub=r_{roleId} obj={meetDispatchId}      act={All}
p7 = sub, obj, act  #会议分组权限规则 sub=r_{roleId} obj={meetDispatchGroupId} act={All}

#用户与角色对应关系
[role_definition]
#g = u_{userId},r_{roleId}
g = _, _

#决策方式(决定是否有权限的决策方式,casbin提供了几种固定的决策方式)
[policy_effect]
e  = some(where (p.eft == allow)) #只要有一条策略规则符合即为有权限
e2 = some(where (p.eft == allow)) #只要有一条策略规则符合即为有权限
e3 = some(where (p.eft == allow)) #只要有一条策略规则符合即为有权限
e4 = some(where (p.eft == allow)) #只要有一条策略规则符合即为有权限
e5 = some(where (p.eft == allow)) #只要有一条策略规则符合即为有权限
e6 = some(where (p.eft == allow)) #只要有一条策略规则符合即为有权限
e7 = some(where (p.eft == allow)) #只要有一条策略规则符合即为有权限

#匹配规则定义
#g(r.sub, p.sub) 判断请求主体(用户)是否属于p.sub这个角色
#r.obj  == p.obj 判断请求客体(资源)是否与对应策略规则中记录一致
#r.act  == p.act 判断请求方式(操作)是否与对应策略规则中记录一致
[matchers]
#RABC(基于角色的数据权限管理)
m  = g(r.sub, p.sub)   && r.obj  == p.obj  && r.act  == p.act
m2 = g(r2.sub, p2.sub) && r2.obj == p2.obj && r2.act == p2.act
m3 = g(r3.sub, p3.sub) && r3.obj == p3.obj && r3.act == p3.act
m4 = g(r4.sub, p4.sub) && r4.obj == p4.obj && r4.act == p4.act
m5 = g(r5.sub, p5.sub) && r5.obj == p5.obj && r5.act == p5.act
m6 = g(r6.sub, p6.sub) && r6.obj == p6.obj && r6.act == p6.act
m7 = g(r7.sub, p7.sub) && r7.obj == p7.obj && r7.act == p7.act

#ABAC(基于属性的数据权限管理)
